// File: DoctorExaminationPage.jsx
"use client";
import React, { useState, use } from "react";
import { useRouter } from "next/navigation";
import { toast } from "react-toastify";
import { Loader2, AlertTriangle, Save } from "lucide-react";

// Import components
import BackNavigation from "./_components/BackNavigation";
import PatientInfo from "./_components/PatientInfo";
import ScreeningResults from "./_components/ScreeningResults";
import DiagnosisForm from "./_components/DiagnosisForm";
import PrescriptionsForm from "./_components/PrescriptionsForm";
import DoctorSignature from "./_components/DoctorSignature";

// Import combined hook
import { useDoctorExamination } from "./_hooks/useDoctorExamination";

export default function DoctorExaminationPage({ params }) {
  const router = useRouter();
  const { id } = use(params); // Screening ID

  // Use combined hook
  const {
    loading,
    error,
    patient,
    screening,
    medicalRecord,
    setMedicalRecord,
    handleMedicalRecordChange,
    prescriptions,
    handlePrescriptionTypeChange,
    handlePrescriptionNotesChange,
    handlePrescriptionItemChange,
    handleSharedDosageChange,
    addPrescriptionItem,
    removePrescriptionItem,
    addPrescription,
    removePrescription,
    // New props for drug search
    drugSearchQuery,
    drugSearchResults,
    isSearchingDrugs,
    searchDrugs,
    selectDrug,
  } = useDoctorExamination(id);

  const [submitting, setSubmitting] = useState(false);
  const [formError, setFormError] = useState(null);

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    setFormError(null);

    try {
      // Validate required fields
      if (!medicalRecord.diagnosis) {
        throw new Error("Diagnosis pasien harus diisi");
      }

      if (!medicalRecord.doctorName) {
        throw new Error("Nama dokter harus diisi");
      }

      // Validate prescription items
      let hasValidPrescription = false;
      for (const prescription of prescriptions) {
        const isRacikan = prescription.type === "Racikan";

        // For racikan prescriptions, validate shared dosage
        if (isRacikan && !prescription.sharedDosage) {
          throw new Error("Dosis racikan harus diisi");
        }

        if (prescription.items.length > 0) {
          const invalidItems = prescription.items.filter(
            (item) => !item.manualDrugName || (!isRacikan && !item.dosage)
          );
          if (invalidItems.length === 0) {
            hasValidPrescription = true;
          }
        }
      }

      if (!hasValidPrescription) {
        throw new Error(
          "Setidaknya satu resep harus diisi lengkap (nama obat dan dosis)"
        );
      }

      // Format data for submission
      const medicalRecordData = {
        patientId: patient.id,
        screeningId: parseInt(id),
        ...medicalRecord,
        prescriptions: prescriptions
          .map((prescription) => {
            const isRacikan = prescription.type === "Racikan";

            return {
              type: prescription.type,
              notes: prescription.notes,
              dosage: isRacikan ? prescription.sharedDosage : null, // Only include dosage for racikan
              items: prescription.items
                .filter(
                  (item) => item.manualDrugName && (isRacikan || item.dosage)
                )
                .map((item) => ({
                  manualDrugName: item.manualDrugName,
                  drugId: item.drugStoreProductId,
                  dosage: isRacikan ? null : item.dosage, // Only include individual dosage for non-racikan
                  quantity: parseInt(item.quantity),
                })),
            };
          })
          .filter((prescription) => prescription.items.length > 0),
      };

      // Submit the medical record
      const response = await fetch("/api/medical-records", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(medicalRecordData),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        // Show success message
        toast.success("Rekam medis berhasil disimpan");

        // Redirect to medical record view
        router.push(`/rekam-medis/${data.medicalRecordId}`);
      } else {
        setFormError(data.message || "Failed to save medical record");
        toast.error(data.message || "Failed to save medical record");
      }
    } catch (error) {
      console.error("Error saving medical record:", error);
      setFormError(
        error.message || "An error occurred while saving medical record"
      );
      toast.error(
        error.message || "An error occurred while saving medical record"
      );
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto p-4 sm:p-6">
        <div className="flex justify-center items-center h-64">
          <div className="text-center">
            <Loader2 className="h-10 w-10 animate-spin text-blue-500 mx-auto" />
            <p className="mt-4 text-gray-600">Memuat data pemeriksaan...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error && !screening) {
    return (
      <div className="max-w-4xl mx-auto p-4 sm:p-6">
        <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
          <div className="flex items-start">
            <AlertTriangle className="h-6 w-6 text-red-500 mr-3 flex-shrink-0" />
            <div>
              <h3 className="text-lg font-medium text-red-800">Error</h3>
              <p className="mt-1 text-red-700">{error}</p>
              <button
                onClick={() => router.push("/rawat-jalan/antrian")}
                className="mt-3 px-4 py-2 bg-white text-red-700 border border-red-300 rounded-md hover:bg-red-50 transition-colors"
              >
                Kembali ke Antrian
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
      {/* Back button */}
      <BackNavigation />

      {/* Main content */}
      <div className="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden">
        {/* Header */}
        <div className="p-5 md:p-6 border-b border-gray-200 bg-gray-50">
          <h1 className="text-xl font-bold text-gray-800 mb-1">
            Pemeriksaan oleh Dokter
          </h1>
          <p className="text-gray-600">Isi diagnosa dan resep untuk pasien</p>
        </div>

        {/* Patient info card */}
        <PatientInfo patient={patient} />

        {/* Screening summary */}
        <ScreeningResults screening={screening} />

        {/* Form */}
        <form onSubmit={handleSubmit}>
          <div className="p-5 md:p-6">
            {formError && (
              <div className="mb-6 bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
                <div className="flex items-start">
                  <AlertTriangle className="h-5 w-5 text-red-500 mr-2 flex-shrink-0" />
                  <p className="text-red-700">{formError}</p>
                </div>
              </div>
            )}

            {/* Diagnosis section */}
            <DiagnosisForm
              medicalRecord={medicalRecord}
              setMedicalRecord={setMedicalRecord}
              handleMedicalRecordChange={handleMedicalRecordChange}
            />

            {/* Multiple Prescriptions section with drug search */}
            <PrescriptionsForm
              prescriptions={prescriptions}
              handlePrescriptionTypeChange={handlePrescriptionTypeChange}
              handlePrescriptionNotesChange={handlePrescriptionNotesChange}
              handlePrescriptionItemChange={handlePrescriptionItemChange}
              handleSharedDosageChange={handleSharedDosageChange}
              addPrescriptionItem={addPrescriptionItem}
              removePrescriptionItem={removePrescriptionItem}
              addPrescription={addPrescription}
              removePrescription={removePrescription}
              // Pass the new drug search props
              searchDrugs={searchDrugs}
              drugSearchResults={drugSearchResults}
              isSearchingDrugs={isSearchingDrugs}
              selectDrug={selectDrug}
              drugSearchQuery={drugSearchQuery}
            />

            {/* Doctor name */}
            <DoctorSignature
              doctorName={medicalRecord.doctorName}
              onChange={handleMedicalRecordChange}
            />

            {/* Submit button */}
            <div className="flex justify-end">
              <button
                type="submit"
                disabled={submitting}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center shadow-sm"
              >
                {submitting ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    <span>Menyimpan...</span>
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    <span>Simpan & Teruskan ke Apoteker</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}

import React from "react";
import { User, FileText, Shield } from "lucide-react";

const PatientInfo = ({ patient }) => {
  // Function to capitalize each word
  const capitalizeEachWord = (str) => {
    if (!str) return "";
    return str
      .split(" ")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(" ");
  };

  if (!patient) return null;

  return (
    <div className="p-5 bg-blue-50 border-b border-blue-100">
      <div className="flex flex-wrap items-center justify-between">
        <div className="flex items-center mb-2 sm:mb-0">
          <User className="h-5 w-5 text-blue-600 mr-2" />
          <h2 className="text-lg font-semibold text-blue-800 mr-3">
            {capitalizeEachWord(patient.name)}
          </h2>
          {patient.isBPJS && (
            <div className="flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 rounded-full text-sm font-medium">
              <Shield className="h-3 w-3" />
              <span>BPJS</span>
            </div>
          )}
        </div>
        <div className="flex items-center text-sm text-gray-600">
          <FileText className="h-4 w-4 mr-1" />
          <span>No. RM: </span>
          <span className="font-mono ml-1 font-medium">{patient.no_rm}</span>
        </div>
      </div>
    </div>
  );
};

export default PatientInfo;

// Model Patient
model Patient {
  id              Int       @id @default(autoincrement())
  no_rm           Int       @unique
  name            String
  gender          String?
  birthDate       DateTime?
  address         String?
  isBPJS          Boolean
  no_bpjs         String?   @unique
  nik             String?   @unique
  phoneNumber     String?   
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

    // Relations
  screenings      Screening[]
  medicalRecords  MedicalRecord[]
}

model Screening {
  id                Int           @id @default(autoincrement())
  patientId         Int
  patient           Patient       @relation(fields: [patientId], references: [id])
  complaints        String        // Patient's complaints
  temperature       Decimal?      // Body temperature
  systolicBP        Int?          // Systolic blood pressure (e.g., 120 in "120/80")
  diastolicBP       Int?          // Diastolic blood pressure (e.g., 80 in "120/80")
  pulse             Int?          // Heart rate
  respiratoryRate   Int?          // Breathing rate
  weight            Decimal?      // Weight in kg
  height            Int?          // Height in cm
  waistCircumference Decimal?     // Lingkar pinggang in cm
  oxygenSaturation  Decimal?      // Saturasi oksigen in percentage
  isBPJSActive      Boolean?      // Status BPJS aktif atau tidak
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Screening status
  status            String        @default("waiting") // waiting, in-progress, completed
  queueNumber       Int?
  
  // Relations
  medicalRecord     MedicalRecord?
  
  @@index([patientId])
  @@index([status])
  @@index([createdAt])
}

saya ingin agar patient info juga mengambil screening data bukan hanya pasien. dan yang ditampilkan di patient info antara lain:
1. nama pasien - no rm
2. jenis kelamin - umur
3. alamat
4. tipe pembayaran

tipe pembayaran diambil dari model screening. 