// Prisma schema
// Generator dan Datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model Patient
model Patient {
  id              Int       @id @default(autoincrement())
  no_rm           Int       @unique
  name            String
  gender          String?
  birthDate       DateTime?
  address         String?
  isBPJS          Boolean
  no_bpjs         String?   @unique
  nik             String?   @unique
  phoneNumber     String?   
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

    // Relations
  screenings      Screening[]
  medicalRecords  MedicalRecord[]
}

model DrugStoreProduct {
  id            Int         @id @default(autoincrement()) 
  name          String
  category      String?
  manufacturer  String?
  purchasePrice Decimal?
  price         Decimal
  stock         Int
  expiryDate    String?
  unit          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([name])
  @@index([category])
  @@index([manufacturer])
  @@index([expiryDate])
}

model DrugPrescription {
  id            Int         @id @default(autoincrement()) 
  name          String
  category      String?
  manufacturer  String?
  purchasePrice Decimal?
  price         Decimal
  stock         Int
  expiryDate    String?
  unit          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([name])
  @@index([category])
  @@index([manufacturer])
  @@index([expiryDate])
}

// Screening model for initial patient assessment
model Screening {
  id                Int           @id @default(autoincrement())
  patientId         Int
  patient           Patient       @relation(fields: [patientId], references: [id])
  complaints        String        // Patient's complaints
  temperature       Decimal?      // Body temperature
  systolicBP        Int?          // Systolic blood pressure (e.g., 120 in "120/80")
  diastolicBP       Int?          // Diastolic blood pressure (e.g., 80 in "120/80")
  pulse             Int?          // Heart rate
  respiratoryRate   Int?          // Breathing rate
  weight            Decimal?      // Weight in kg
  height            Int?          // Height in cm
  waistCircumference Decimal?     // Lingkar pinggang in cm
  oxygenSaturation  Decimal?      // Saturasi oksigen in percentage
  isBPJSActive      Boolean?      // Status BPJS aktif atau tidak
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Screening status
  status            String        @default("waiting") // waiting, in-progress, completed
  queueNumber       Int?
  
  // Relations
  medicalRecord     MedicalRecord?
  
  @@index([patientId])
  @@index([status])
  @@index([createdAt])
}

// Queue model for managing patient queue
model OutpatientQueue {
  id                Int           @id @default(autoincrement())
  screeningId       Int           @unique
  queueNumber       Int
  status            String        @default("waiting") // waiting, called, in-progress, completed
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([status])
  @@index([createdAt])
}

// Medical Record model for storing complete patient visit data
model MedicalRecord {
  id                Int           @id @default(autoincrement())
  patientId         Int
  patient           Patient       @relation(fields: [patientId], references: [id])
  screeningId       Int           @unique
  screening         Screening     @relation(fields: [screeningId], references: [id])
  
  // Doctor's examination
  diagnosis         String?       // Diagnosis description
  icdCode           String?       // ICD-10 code
  clinicalNotes     String?       // Additional clinical notes
  
  // Visit metadata
  visitType         String        @default("outpatient") // outpatient, inpatient
  visitDate         DateTime      @default(now())
  doctorName        String?
  
  // Relations
  prescriptions     Prescription[]  // Changed from Prescription? to Prescription[]
  pharmacyQueue     PharmacyQueue?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([patientId])
  @@index([visitDate])
  @@index([icdCode])
}

// Prescription models
model Prescription {
  id                Int               @id @default(autoincrement())
  medicalRecordId   Int               
  medicalRecord     MedicalRecord     @relation(fields: [medicalRecordId], references: [id])
  items             PrescriptionItem[]
  notes             String?           // Additional notes about the prescription
  prescriptionType  String?           // Type of prescription (e.g., "Main", "Follow-up", "Alternative", "Racikan")
  dosage            String?           // Shared dosage instruction for racikan prescriptions
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([medicalRecordId])
}

model PrescriptionItem {
  id                Int               @id @default(autoincrement())
  prescriptionId    Int
  prescription      Prescription      @relation(fields: [prescriptionId], references: [id])
  manualDrugName    String?           // For manual entry when drug not in system
  dosage            String?           // Individual dosage (only used for non-racikan prescriptions)
  quantity          Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([prescriptionId])
}

model PharmacyQueue {
  id                Int               @id @default(autoincrement())
  medicalRecordId   Int               @unique
  medicalRecord     MedicalRecord     @relation(fields: [medicalRecordId], references: [id])
  queueNumber       Int
  status            String            @default("waiting") // waiting, preparing, ready, dispensed
  pharmacistName    String?           // Name of the pharmacist handling the prescription
  notes             String?           // Any special notes for the pharmacist
  startedAt         DateTime?         // When preparation began
  completedAt       DateTime?         // When preparation was completed
  dispensedAt       DateTime?         // When medication was given to patient
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([status])
  @@index([createdAt])
  @@index([queueNumber])
}

// ICD-10 lookup table for diagnosis codes
model IcdCode {
  id                Int           @id @default(autoincrement())
  code              String        @unique
  description       String
  version           String?
  
  @@index([code])
}

"use client";

import React, { use, useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { ChevronLeft } from "lucide-react";
import { toast } from "react-toastify";
import { LoadingState, ErrorState, NotFoundState } from "./_components/UIState";
import PrescriptionHeader from "./_components/PrescriptionHeader";
import PatientInfo from "./_components/PatientInfo";
import PrescriptionList from "./_components/PrescriptionList";
import ActionButtons from "./_components/ActionButtons";

export default function PrescriptionDetailsPage({ params }) {
  const router = useRouter();
  const { id } = use(params); // This is the medicalRecordId

  const [loading, setLoading] = useState(true);
  const [prescription, setPrescription] = useState(null);
  const [error, setError] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);

  useEffect(() => {
    async function fetchPrescriptionDetails() {
      try {
        setLoading(true);
        const response = await fetch(`/api/pharmacy/prescriptions/${id}`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {
          setPrescription(data.prescription);
        } else {
          setError(data.message || "Failed to fetch prescription details");
          toast.error(data.message || "Failed to fetch prescription details");
        }
      } catch (error) {
        console.error("Error fetching prescription details:", error);
        setError("An error occurred while fetching prescription details");
        toast.error("An error occurred while fetching prescription details");
      } finally {
        setLoading(false);
      }
    }

    fetchPrescriptionDetails();
  }, [id]);

  const handleMarkAsReady = async () => {
    try {
      setIsProcessing(true);
      const response = await fetch(
        `/api/pharmacy/queue/${prescription.medicalRecordId}/ready`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        // Update the prescription state locally instead of redirecting
        setPrescription({
          ...prescription,
          status: "ready",
        });
        toast.success(`Resep siap diambil`);
      } else {
        toast.error(data.message || "Failed to mark prescription as ready");
      }
    } catch (error) {
      console.error("Error marking prescription as ready:", error);
      toast.error("An error occurred while marking prescription as ready");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDispense = async () => {
    try {
      setIsProcessing(true);
      const response = await fetch(
        `/api/pharmacy/queue/${prescription.medicalRecordId}/dispense`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        // Update the prescription state locally
        setPrescription({
          ...prescription,
          status: "dispensed",
        });
        toast.success(`Resep telah diserahkan`);
      } else {
        toast.error(data.message || "Failed to dispense prescription");
      }
    } catch (error) {
      console.error("Error dispensing prescription:", error);
      toast.error("An error occurred while dispensing prescription");
    } finally {
      setIsProcessing(false);
    }
  };

  if (loading) {
    return <LoadingState />;
  }

  if (error) {
    return <ErrorState error={error} router={router} />;
  }

  if (!prescription) {
    return <NotFoundState router={router} />;
  }

  return (
    <div className="max-w-6xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
      {/* Back button */}
      <div className="mb-6">
        <Link
          href="/apotek/antrian-resep"
          className="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors font-medium"
        >
          <ChevronLeft className="h-5 w-5" />
          <span>Kembali ke Antrian Farmasi</span>
        </Link>
      </div>

      {/* Main content */}
      <div className="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden">
        <PrescriptionHeader prescription={prescription} />
        <PatientInfo prescription={prescription} />
        <PrescriptionList prescriptions={prescription.prescriptions} />
        <ActionButtons
          router={router}
          prescription={prescription}
          isProcessing={isProcessing}
          handleMarkAsReady={handleMarkAsReady}
          handleDispense={handleDispense}
        />
      </div>
    </div>
  );
}


