// app/rekam-medis/[id]/page.jsx
"use client";

import { useState, useEffect, use } from "react";
import { useRouter } from "next/navigation";
import { toast } from "react-toastify";
import PatientInfoCard from "./_components/PatientInfoCard";
import { LoadingState, ErrorState } from "./_components/UIState";
import DiagnosisSection from "./_components/DiagnosisSection";
import VitalsSection from "./_components/VitalsSection";
import PrescriptionsSection from "./_components/PrescriptionsSection";
import PharmacySection from "./_components/PharmacySection";
import DoctorSignature from "./_components/DoctorSignature";
import PageHeader from "./_components/PageHeader";

export default function MedicalRecordDetailPage({ params }) {
  const router = useRouter();
  const { id } = use(params);

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [medicalRecord, setMedicalRecord] = useState(null);
  const [patient, setPatient] = useState(null);
  const [screening, setScreening] = useState(null);
  const [prescriptions, setPrescriptions] = useState([]);
  const [pharmacyQueue, setPharmacyQueue] = useState(null);

  // Fetch medical record data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/medical-records/${id}`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {
          setMedicalRecord(data.medicalRecord);
          setPatient(data.patient);
          setScreening(data.screening);
          setPrescriptions(data.prescriptions);
          setPharmacyQueue(data.pharmacyQueue);
        } else {
          setError(data.message || "Failed to fetch medical record data");
          toast.error(data.message || "Failed to fetch medical record data");
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        setError("An error occurred while fetching data");
        toast.error("An error occurred while fetching data");
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchData();
    }
  }, [id]);

  // Handle print function
  const handlePrint = () => {
    window.print();
  };

  if (loading) {
    return <LoadingState />;
  }

  if (error && !medicalRecord) {
    return <ErrorState error={error} router={router} />;
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
      {/* Main content */}
      <div className="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden print:shadow-none print:border-none">
        <PageHeader visitDate={medicalRecord?.visitDate} />

        <PatientInfoCard patient={patient} />

        {/* Medical record content */}
        <div className="p-5 md:p-6 space-y-6">
          <DiagnosisSection medicalRecord={medicalRecord} />

          {screening && <VitalsSection screening={screening} />}

          {prescriptions && prescriptions.length > 0 && (
            <PrescriptionsSection prescriptions={prescriptions} />
          )}

          {pharmacyQueue && <PharmacySection pharmacyQueue={pharmacyQueue} />}

          <DoctorSignature doctorName={medicalRecord?.doctorName} />
        </div>
      </div>
    </div>
  );
}

// app/rekam-medis/[id]/components/PharmacySection.jsx
import React from "react";
import { Beaker } from "lucide-react";
import { formatDate, formatTime } from "../utils/formatters";

export default function PharmacySection({ pharmacyQueue }) {
  if (!pharmacyQueue) return null;

  // Format pharmacy queue status
  const formatPharmacyStatus = (status) => {
    switch (status) {
      case "waiting":
        return "Menunggu";
      case "preparing":
        return "Sedang Disiapkan";
      case "ready":
        return "Siap Diambil";
      case "dispensed":
        return "Telah Diberikan";
      default:
        return status;
    }
  };

  return (
    <div>
      <div className="flex items-center mb-4">
        <Beaker className="h-5 w-5 text-blue-600 mr-2 print:text-gray-700" />
        <h3 className="text-lg font-semibold text-gray-800">
          Informasi Farmasi
        </h3>
      </div>

      <div className="bg-gray-50 p-4 rounded-lg border border-gray-200 print:bg-white">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <h4 className="text-sm font-medium text-gray-600 mb-1">
              Nomor Antrian:
            </h4>
            <p className="text-gray-800 font-medium">
              {pharmacyQueue.queueNumber}
            </p>
          </div>

          <div>
            <h4 className="text-sm font-medium text-gray-600 mb-1">Status:</h4>
            <div className="flex items-center">
              <span
                className={`px-2 py-1 rounded-full text-sm font-medium
                  ${
                    pharmacyQueue.status === "waiting"
                      ? "bg-yellow-100 text-yellow-800"
                      : ""
                  }
                  ${
                    pharmacyQueue.status === "preparing"
                      ? "bg-blue-100 text-blue-800"
                      : ""
                  }
                  ${
                    pharmacyQueue.status === "ready"
                      ? "bg-green-100 text-green-800"
                      : ""
                  }
                  ${
                    pharmacyQueue.status === "dispensed"
                      ? "bg-gray-100 text-gray-800"
                      : ""
                  }
                `}
              >
                {formatPharmacyStatus(pharmacyQueue.status)}
              </span>
            </div>
          </div>

          {pharmacyQueue.pharmacistName && (
            <div>
              <h4 className="text-sm font-medium text-gray-600 mb-1">
                Apoteker:
              </h4>
              <p className="text-gray-800">{pharmacyQueue.pharmacistName}</p>
            </div>
          )}

          {pharmacyQueue.startedAt && (
            <div>
              <h4 className="text-sm font-medium text-gray-600 mb-1">
                Mulai Diproses:
              </h4>
              <p className="text-gray-800">
                {formatDate(pharmacyQueue.startedAt)}{" "}
                {formatTime(pharmacyQueue.startedAt)}
              </p>
            </div>
          )}

          {pharmacyQueue.completedAt && (
            <div>
              <h4 className="text-sm font-medium text-gray-600 mb-1">
                Selesai Diproses:
              </h4>
              <p className="text-gray-800">
                {formatDate(pharmacyQueue.completedAt)}{" "}
                {formatTime(pharmacyQueue.completedAt)}
              </p>
            </div>
          )}

          {pharmacyQueue.dispensedAt && (
            <div>
              <h4 className="text-sm font-medium text-gray-600 mb-1">
                Telah Diberikan:
              </h4>
              <p className="text-gray-800">
                {formatDate(pharmacyQueue.dispensedAt)}{" "}
                {formatTime(pharmacyQueue.dispensedAt)}
              </p>
            </div>
          )}

          {pharmacyQueue.notes && (
            <div className="col-span-1 md:col-span-2">
              <h4 className="text-sm font-medium text-gray-600 mb-1">
                Catatan Farmasi:
              </h4>
              <p className="text-gray-800 whitespace-pre-line">
                {pharmacyQueue.notes}
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

model Screening {
  id                Int           @id @default(autoincrement())
  patientId         Int
  patient           Patient       @relation(fields: [patientId], references: [id])
  complaints        String        // Patient's complaints
  temperature       Decimal?      // Body temperature
  systolicBP        Int?          // Systolic blood pressure (e.g., 120 in "120/80")
  diastolicBP       Int?          // Diastolic blood pressure (e.g., 80 in "120/80")
  pulse             Int?          // Heart rate
  respiratoryRate   Int?          // Breathing rate
  weight            Decimal?      // Weight in kg
  height            Int?          // Height in cm
  waistCircumference Decimal?     // Lingkar pinggang in cm
  oxygenSaturation  Decimal?      // Saturasi oksigen in percentage
  isBPJSActive      Boolean?      // Status BPJS aktif atau tidak
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Screening status
  status            String        @default("waiting") // waiting, in-progress, completed
  queueNumber       Int?
  
  // Relations
  medicalRecord     MedicalRecord?
  
  @@index([patientId])
  @@index([status])
  @@index([createdAt])
}

// Medical Record model for storing complete patient visit data
model MedicalRecord {
  id                Int           @id @default(autoincrement())
  patientId         Int
  patient           Patient       @relation(fields: [patientId], references: [id])
  screeningId       Int           @unique
  screening         Screening     @relation(fields: [screeningId], references: [id])
  
  // Doctor's examination
  diagnosis         String?       // Diagnosis description
  icdCode           String?       // ICD-10 code
  clinicalNotes     String?       // Additional clinical notes
  
  // Visit metadata
  visitType         String        @default("outpatient") // outpatient, inpatient
  visitDate         DateTime      @default(now())
  doctorName        String?
  
  // Relations
  prescriptions     Prescription[]  // Changed from Prescription? to Prescription[]
  pharmacyQueue     PharmacyQueue?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([patientId])
  @@index([visitDate])
  @@index([icdCode])
}

// Prescription models
model Prescription {
  id                Int               @id @default(autoincrement())
  medicalRecordId   Int               
  medicalRecord     MedicalRecord     @relation(fields: [medicalRecordId], references: [id])
  items             PrescriptionItem[]
  notes             String?           // Additional notes about the prescription
  prescriptionType  String?           // Type of prescription (e.g., "Main", "Follow-up", "Alternative", "Racikan")
  dosage            String?           // Shared dosage instruction for racikan prescriptions
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([medicalRecordId])
}

model PrescriptionItem {
  id                Int               @id @default(autoincrement())
  prescriptionId    Int
  prescription      Prescription      @relation(fields: [prescriptionId], references: [id])
  manualDrugName    String?           // For manual entry when drug not in system
  dosage            String?           // Individual dosage (only used for non-racikan prescriptions)
  quantity          Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([prescriptionId])
}

model PharmacyQueue {
  id                Int               @id @default(autoincrement())
  medicalRecordId   Int               @unique
  medicalRecord     MedicalRecord     @relation(fields: [medicalRecordId], references: [id])
  queueNumber       Int
  status            String            @default("waiting") // waiting, preparing, ready, dispensed
  pharmacistName    String?           // Name of the pharmacist handling the prescription
  notes             String?           // Any special notes for the pharmacist
  startedAt         DateTime?         // When preparation began
  completedAt       DateTime?         // When preparation was completed
  dispensedAt       DateTime?         // When medication was given to patient
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([status])
  @@index([createdAt])
  @@index([queueNumber])
}