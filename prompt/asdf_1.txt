// beberapa skema saya
model Patient {
  id              Int       @id @default(autoincrement())
  no_rm           Int       @unique
  name            String
  gender          String?
  birthDate       DateTime?
  address         String?
  isBPJS          Boolean
  no_bpjs         String?   @unique
  nik             String?   @unique
  phoneNumber     String?   
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

    // Relations
  screenings      Screening[]
  medicalRecords  MedicalRecord[]
}

model Screening {
  id                Int           @id @default(autoincrement())
  patientId         Int
  patient           Patient       @relation(fields: [patientId], references: [id])
  complaints        String        // Patient's complaints
  temperature       Decimal?      // Body temperature
  systolicBP        Int?          // Systolic blood pressure (e.g., 120 in "120/80")
  diastolicBP       Int?          // Diastolic blood pressure (e.g., 80 in "120/80")
  pulse             Int?          // Heart rate
  respiratoryRate   Int?          // Breathing rate
  weight            Decimal?      // Weight in kg
  height            Int?          // Height in cm
  waistCircumference Decimal?     // Lingkar pinggang in cm
  oxygenSaturation  Decimal?      // Saturasi oksigen in percentage
  isBPJSActive      Boolean?      // Status BPJS aktif atau tidak
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Screening status
  status            String        @default("waiting") // waiting, in-progress, completed
  queueNumber       Int?
  
  // Relations
  medicalRecord     MedicalRecord?
  
  @@index([patientId])
  @@index([status])
  @@index([createdAt])
}

// /app/api/outpatient/queue/route.js
import { NextResponse } from "next/server";
import { db } from "@/lib/db";

// Get queue list
export async function GET(request) {
  try {
    const searchParams = new URL(request.url).searchParams;
    const status = searchParams.get("status") || "waiting";

    // Filter by status unless "all" is specified
    const statusFilter = status === "all" ? {} : { status };

    // Get today's date
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // Get queue data
    const queueData = await db.outpatientQueue.findMany({
      where: {
        ...statusFilter,
        createdAt: {
          gte: today,
        },
      },
      orderBy: {
        queueNumber: "asc",
      },
    });

    // Enrich queue data with patient information
    const enrichedQueue = await Promise.all(
      queueData.map(async (queue) => {
        const screening = await db.screening.findUnique({
          where: {
            id: queue.screeningId,
          },
          include: {
            patient: true,
          },
        });

        return {
          ...queue,
          patientName: screening?.patient?.name || "Unknown",
          noRM: screening?.patient?.no_rm || "N/A",
          isBPJS: screening?.patient?.isBPJS || false,
        };
      })
    );

    return NextResponse.json({
      success: true,
      queue: enrichedQueue,
    });
  } catch (error) {
    console.error("Error fetching queue:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch queue data" },
      { status: 500 }
    );
  }
}

tambahkan jenis kelamin, tanggal lahir, dan alamat. dan juga untuk isBPJS, ubah ke isBPJSActive dari model screening