// File: DoctorExaminationPage.jsx
"use client";
import React, { useState, use } from "react";
import { useRouter } from "next/navigation";
import { toast } from "react-toastify";
import { Loader2, AlertTriangle, Save } from "lucide-react";

// Import components
import BackNavigation from "./_components/BackNavigation";
import PatientInfo from "./_components/PatientInfo";
import ScreeningResults from "./_components/ScreeningResults";
import DiagnosisForm from "./_components/DiagnosisForm";
import PrescriptionsForm from "./_components/PrescriptionsForm";
import DoctorSignature from "./_components/DoctorSignature";

// Import combined hook
import { useDoctorExamination } from "./_hooks/useDoctorExamination";

export default function DoctorExaminationPage({ params }) {
  const router = useRouter();
  const { id } = use(params); // Screening ID

  // Use combined hook
  const {
    loading,
    error,
    patient,
    screening,
    medicalRecord,
    setMedicalRecord,
    handleMedicalRecordChange,
    prescriptions,
    handlePrescriptionTypeChange,
    handlePrescriptionNotesChange,
    handlePrescriptionItemChange,
    addPrescriptionItem,
    removePrescriptionItem,
    addPrescription,
    removePrescription,
    // New props for drug search
    drugSearchQuery,
    drugSearchResults,
    isSearchingDrugs,
    searchDrugs,
    selectDrug,
  } = useDoctorExamination(id);

  const [submitting, setSubmitting] = useState(false);
  const [formError, setFormError] = useState(null);

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    setFormError(null);

    try {
      // Validate required fields
      if (!medicalRecord.diagnosis) {
        throw new Error("Diagnosis pasien harus diisi");
      }

      if (!medicalRecord.doctorName) {
        throw new Error("Nama dokter harus diisi");
      }

      // Validate prescription items
      let hasValidPrescription = false;
      for (const prescription of prescriptions) {
        if (prescription.items.length > 0) {
          const invalidItems = prescription.items.filter(
            (item) => !item.manualDrugName || !item.dosage
          );
          if (invalidItems.length === 0) {
            hasValidPrescription = true;
          }
        }
      }

      if (!hasValidPrescription) {
        throw new Error(
          "Setidaknya satu resep harus diisi lengkap (nama obat dan dosis)"
        );
      }

      // Format data for submission
      const medicalRecordData = {
        patientId: patient.id,
        screeningId: parseInt(id),
        ...medicalRecord,
        prescriptions: prescriptions
          .map((prescription) => ({
            type: prescription.type,
            notes: prescription.notes,
            items: prescription.items
              .filter((item) => item.manualDrugName && item.dosage)
              .map((item) => ({
                manualDrugName: item.manualDrugName,
                drugStoreProductId: item.drugStoreProductId,
                dosage: item.dosage,
                quantity: parseInt(item.quantity),
              })),
          }))
          .filter((prescription) => prescription.items.length > 0),
      };

      // Submit the medical record
      const response = await fetch("/api/medical-records", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(medicalRecordData),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        // Show success message
        toast.success("Rekam medis berhasil disimpan");

        // Redirect to medical record view
        router.push(`/rekam-medis/${data.medicalRecordId}`);
      } else {
        setFormError(data.message || "Failed to save medical record");
        toast.error(data.message || "Failed to save medical record");
      }
    } catch (error) {
      console.error("Error saving medical record:", error);
      setFormError(
        error.message || "An error occurred while saving medical record"
      );
      toast.error(
        error.message || "An error occurred while saving medical record"
      );
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto p-4 sm:p-6">
        <div className="flex justify-center items-center h-64">
          <div className="text-center">
            <Loader2 className="h-10 w-10 animate-spin text-blue-500 mx-auto" />
            <p className="mt-4 text-gray-600">Memuat data pemeriksaan...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error && !screening) {
    return (
      <div className="max-w-4xl mx-auto p-4 sm:p-6">
        <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
          <div className="flex items-start">
            <AlertTriangle className="h-6 w-6 text-red-500 mr-3 flex-shrink-0" />
            <div>
              <h3 className="text-lg font-medium text-red-800">Error</h3>
              <p className="mt-1 text-red-700">{error}</p>
              <button
                onClick={() => router.push("/rawat-jalan/antrian")}
                className="mt-3 px-4 py-2 bg-white text-red-700 border border-red-300 rounded-md hover:bg-red-50 transition-colors"
              >
                Kembali ke Antrian
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
      {/* Back button */}
      <BackNavigation />

      {/* Main content */}
      <div className="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden">
        {/* Header */}
        <div className="p-5 md:p-6 border-b border-gray-200 bg-gray-50">
          <h1 className="text-xl font-bold text-gray-800 mb-1">
            Pemeriksaan oleh Dokter
          </h1>
          <p className="text-gray-600">Isi diagnosa dan resep untuk pasien</p>
        </div>

        {/* Patient info card */}
        <PatientInfo patient={patient} />

        {/* Screening summary */}
        <ScreeningResults screening={screening} />

        {/* Form */}
        <form onSubmit={handleSubmit}>
          <div className="p-5 md:p-6">
            {formError && (
              <div className="mb-6 bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
                <div className="flex items-start">
                  <AlertTriangle className="h-5 w-5 text-red-500 mr-2 flex-shrink-0" />
                  <p className="text-red-700">{formError}</p>
                </div>
              </div>
            )}

            {/* Diagnosis section */}
            <DiagnosisForm
              medicalRecord={medicalRecord}
              setMedicalRecord={setMedicalRecord}
              handleMedicalRecordChange={handleMedicalRecordChange}
            />

            {/* Multiple Prescriptions section with drug search */}
            <PrescriptionsForm
              prescriptions={prescriptions}
              handlePrescriptionTypeChange={handlePrescriptionTypeChange}
              handlePrescriptionNotesChange={handlePrescriptionNotesChange}
              handlePrescriptionItemChange={handlePrescriptionItemChange}
              addPrescriptionItem={addPrescriptionItem}
              removePrescriptionItem={removePrescriptionItem}
              addPrescription={addPrescription}
              removePrescription={removePrescription}
              // Pass the new drug search props
              searchDrugs={searchDrugs}
              drugSearchResults={drugSearchResults}
              isSearchingDrugs={isSearchingDrugs}
              selectDrug={selectDrug}
              drugSearchQuery={drugSearchQuery}
            />

            {/* Doctor name */}
            <DoctorSignature
              doctorName={medicalRecord.doctorName}
              onChange={handleMedicalRecordChange}
            />

            {/* Submit button */}
            <div className="flex justify-end">
              <button
                type="submit"
                disabled={submitting}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center shadow-sm"
              >
                {submitting ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    <span>Menyimpan...</span>
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    <span>Simpan & Buat Rekam Medis</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}


// File: _components/PrescriptionsForm.jsx
import React from "react";
import { Pill, Plus, Clipboard, X } from "lucide-react";
import PrescriptionItem from "./PrescriptionItem";

const PrescriptionsForm = ({
  prescriptions,
  handlePrescriptionTypeChange,
  handlePrescriptionNotesChange,
  handlePrescriptionItemChange,
  addPrescriptionItem,
  removePrescriptionItem,
  addPrescription,
  removePrescription,
  // New props for drug search
  searchDrugs,
  drugSearchResults,
  isSearchingDrugs,
  selectDrug,
  drugSearchQuery,
}) => {
  return (
    <div className="mb-8">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Pill className="h-5 w-5 text-blue-600 mr-2" />
          <h3 className="text-lg font-semibold text-gray-800">Resep Obat</h3>
        </div>
        <button
          type="button"
          onClick={addPrescription}
          className="px-3 py-1.5 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm flex items-center shadow-sm"
        >
          <Plus className="h-4 w-4 mr-1" />
          Tambah Resep Baru
        </button>
      </div>

      {/* Multiple prescriptions */}
      <div className="space-y-6">
        {prescriptions.map((prescription, prescIndex) => (
          <div
            key={prescription.id}
            className="border border-gray-200 rounded-lg bg-white shadow-sm overflow-hidden"
          >
            {/* Prescription header */}
            <div className="bg-gray-50 p-4 border-b border-gray-200 flex justify-between items-center">
              <div className="flex items-center">
                <Clipboard className="h-4 w-4 text-blue-600 mr-2" />
                <h4 className="font-medium text-gray-800">
                  Resep {prescIndex + 1}
                </h4>
              </div>
              <div className="flex items-center space-x-3">
                <select
                  value={prescription.type}
                  onChange={(e) =>
                    handlePrescriptionTypeChange(prescIndex, e.target.value)
                  }
                  className="text-sm border border-gray-300 rounded px-2 py-1 bg-white"
                >
                  <option value="Main">Utama</option>
                  <option value="Alternative">Alternatif</option>
                  <option value="Follow-up">Lanjutan</option>
                </select>
                <button
                  type="button"
                  onClick={() => removePrescription(prescIndex)}
                  disabled={prescriptions.length === 1}
                  className={`p-1 rounded ${
                    prescriptions.length === 1
                      ? "text-gray-400 cursor-not-allowed"
                      : "text-red-500 hover:bg-red-50"
                  }`}
                >
                  <X className="h-4 w-4" />
                </button>
              </div>
            </div>

            {/* Prescription contents */}
            <div className="p-4">
              {/* Prescription items */}
              <div className="space-y-4 mb-4">
                {prescription.items.map((item, itemIndex) => (
                  <PrescriptionItem
                    key={item.id}
                    item={item}
                    itemIndex={itemIndex}
                    prescIndex={prescIndex}
                    itemsLength={prescription.items.length}
                    handlePrescriptionItemChange={handlePrescriptionItemChange}
                    removePrescriptionItem={removePrescriptionItem}
                    // Pass drug search props
                    searchDrugs={searchDrugs}
                    drugSearchResults={drugSearchResults}
                    isSearchingDrugs={isSearchingDrugs}
                    selectDrug={selectDrug}
                    drugSearchQuery={drugSearchQuery}
                  />
                ))}
              </div>

              {/* Add prescription item button */}
              <button
                type="button"
                onClick={() => addPrescriptionItem(prescIndex)}
                className="w-full py-2 border border-dashed border-gray-300 rounded-md text-gray-500 hover:text-gray-700 hover:border-gray-400 transition-colors text-sm flex items-center justify-center"
              >
                <Plus className="h-4 w-4 mr-1" />
                <span>Tambah Obat</span>
              </button>

              {/* Prescription notes */}
              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Catatan Tambahan Resep
                </label>
                <textarea
                  value={prescription.notes}
                  onChange={(e) =>
                    handlePrescriptionNotesChange(prescIndex, e.target.value)
                  }
                  rows="2"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Catatan tambahan untuk apoteker (opsional)"
                />
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PrescriptionsForm;


import React, { useRef, useEffect, useState } from "react";
import { Minus, Search, Loader2 } from "lucide-react";
import { DOSAGE_SUGGESTIONS } from "@/data/dosis";

const PrescriptionItem = ({
  item,
  itemIndex,
  prescIndex,
  itemsLength,
  handlePrescriptionItemChange,
  removePrescriptionItem,
  // Drug search props
  searchDrugs,
  drugSearchResults,
  isSearchingDrugs,
  selectDrug,
  drugSearchQuery,
}) => {
  // Refs for handling dropdown
  const dropdownRef = useRef(null);
  const inputRef = useRef(null);
  const dosageInputRef = useRef(null);
  const dosageDropdownRef = useRef(null);

  // State to control dosage suggestions visibility
  const [showDosageSuggestions, setShowDosageSuggestions] = useState(false);
  // State to store filtered dosage suggestions
  const [filteredDosageSuggestions, setFilteredDosageSuggestions] =
    useState(DOSAGE_SUGGESTIONS);

  // Close drug search dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target) &&
        inputRef.current &&
        !inputRef.current.contains(event.target)
      ) {
        // Could use a state variable to control dropdown visibility if needed
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Handle dosage suggestions dropdown
  useEffect(() => {
    const handleClickOutsideDosage = (event) => {
      if (
        dosageDropdownRef.current &&
        !dosageDropdownRef.current.contains(event.target) &&
        dosageInputRef.current &&
        !dosageInputRef.current.contains(event.target)
      ) {
        setShowDosageSuggestions(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutsideDosage);
    return () => {
      document.removeEventListener("mousedown", handleClickOutsideDosage);
    };
  }, []);

  // Handle selecting a dosage suggestion
  const handleSelectDosage = (suggestion) => {
    handlePrescriptionItemChange(prescIndex, itemIndex, "dosage", suggestion);
    setShowDosageSuggestions(false);
  };

  // Filter dosage suggestions based on input
  const handleDosageInputChange = (value) => {
    handlePrescriptionItemChange(prescIndex, itemIndex, "dosage", value);

    // Filter suggestions based on input
    const filtered = DOSAGE_SUGGESTIONS.filter((suggestion) =>
      suggestion.toLowerCase().includes(value.toLowerCase())
    );
    setFilteredDosageSuggestions(filtered);

    // Show suggestions dropdown if we have input
    setShowDosageSuggestions(true);
  };

  return (
    <div className="p-4 border border-gray-200 rounded-md bg-gray-50">
      <div className="flex justify-between items-start mb-3">
        <h4 className="text-sm font-medium text-gray-700">
          Obat #{itemIndex + 1}
        </h4>
        <button
          type="button"
          onClick={() => removePrescriptionItem(prescIndex, itemIndex)}
          disabled={itemsLength === 1}
          className={`p-1 rounded-full ${
            itemsLength === 1
              ? "text-gray-400 cursor-not-allowed"
              : "text-red-500 hover:bg-red-100"
          }`}
        >
          <Minus className="h-4 w-4" />
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Drug name with autocomplete */}
        <div className="relative">
          <label className="block text-xs font-medium text-gray-700 mb-1">
            Nama Obat
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-4 w-4 text-gray-400" />
            </div>
            <input
              ref={inputRef}
              type="text"
              value={item.manualDrugName}
              onChange={(e) => {
                handlePrescriptionItemChange(
                  prescIndex,
                  itemIndex,
                  "manualDrugName",
                  e.target.value
                );
                searchDrugs(e.target.value);
              }}
              className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Cari obat..."
            />
            {isSearchingDrugs && (
              <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <Loader2 className="h-4 w-4 text-blue-500 animate-spin" />
              </div>
            )}
          </div>

          {/* Dropdown for drug search results */}
          {drugSearchResults.length > 0 && (
            <div
              ref={dropdownRef}
              className="absolute z-10 mt-1 w-full bg-white shadow-lg rounded-md border border-gray-200 max-h-48 overflow-y-auto"
            >
              {drugSearchResults.map((drug) => (
                <div
                  key={drug.id}
                  onClick={() => selectDrug(prescIndex, itemIndex, drug)}
                  className="px-4 py-2 hover:bg-blue-50 cursor-pointer text-sm"
                >
                  <div className="font-medium">{drug.displayName}</div>
                  {/* <div className="text-xs text-gray-500">
                    Stok: {drug.stock} | Harga: Rp {drug.price.toLocaleString()}
                  </div> */}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Dosage with searchable suggestions */}
        <div className="relative">
          <label className="block text-xs font-medium text-gray-700 mb-1">
            Dosis
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-4 w-4 text-gray-400" />
            </div>
            <input
              ref={dosageInputRef}
              type="text"
              value={item.dosage}
              onChange={(e) => handleDosageInputChange(e.target.value)}
              onFocus={() => setShowDosageSuggestions(true)}
              className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Cari atau masukkan dosis..."
            />
          </div>

          {/* Dropdown for filtered dosage suggestions */}
          {showDosageSuggestions && filteredDosageSuggestions.length > 0 && (
            <div
              ref={dosageDropdownRef}
              className="absolute z-10 mt-1 w-full bg-white shadow-lg rounded-md border border-gray-200 max-h-48 overflow-y-auto"
            >
              {filteredDosageSuggestions.map((suggestion, index) => (
                <div
                  key={index}
                  onClick={() => handleSelectDosage(suggestion)}
                  className="px-4 py-2 hover:bg-blue-50 cursor-pointer text-sm"
                >
                  {suggestion}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Quantity */}
        <div className="md:col-span-2">
          <label className="block text-xs font-medium text-gray-700 mb-1">
            Jumlah
          </label>
          <input
            type="number"
            min="1"
            value={item.quantity}
            onChange={(e) =>
              handlePrescriptionItemChange(
                prescIndex,
                itemIndex,
                "quantity",
                e.target.value
              )
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
    </div>
  );
};

export default PrescriptionItem;



// File: _hooks/useDoctorExamination.js
import { useState, useEffect } from "react";
import { toast } from "react-toastify";

export const useDoctorExamination = (screeningId) => {
  // Existing state...
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [patient, setPatient] = useState(null);
  const [screening, setScreening] = useState(null);

  // Medical record state
  const [medicalRecord, setMedicalRecord] = useState({
    diagnosis: "",
    icdCode: "",
    clinicalNotes: "",
    doctorName: "",
  });

  // Multiple prescriptions state
  const [prescriptions, setPrescriptions] = useState([
    {
      id: 1,
      type: "Main",
      notes: "",
      items: [
        {
          id: 1,
          manualDrugName: "",
          drugStoreProductId: null,
          drugStoreProductName: "",
          dosage: "",
          quantity: 1,
        },
      ],
    },
  ]);

  // Add state for drug search
  const [drugSearchQuery, setDrugSearchQuery] = useState("");
  const [drugSearchResults, setDrugSearchResults] = useState([]);
  const [isSearchingDrugs, setIsSearchingDrugs] = useState(false);

  // Existing useEffect for fetching screening data...
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/screenings/${screeningId}`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {
          setScreening(data.screening);
          setPatient(data.patient);
        } else {
          setError(data.message || "Failed to fetch screening data");
          toast.error(data.message || "Failed to fetch screening data");
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        setError("An error occurred while fetching data");
        toast.error("An error occurred while fetching data");
      } finally {
        setLoading(false);
      }
    };

    if (screeningId) {
      fetchData();
    }
  }, [screeningId]);

  // Add a function to search for drugs
  const searchDrugs = async (query) => {
    setDrugSearchQuery(query);

    if (query.length < 2) {
      setDrugSearchResults([]);
      return;
    }

    try {
      setIsSearchingDrugs(true);
      const response = await fetch(
        `/api/drug-store-products?search=${query}&limit=10`
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        setDrugSearchResults(data.products);
      } else {
        console.error("Failed to fetch drugs");
      }
    } catch (error) {
      console.error("Error searching drugs:", error);
    } finally {
      setIsSearchingDrugs(false);
    }
  };

  // Function to select a drug from search results
  const selectDrug = (prescIndex, itemIndex, drug) => {
    const updatedPrescriptions = [...prescriptions];
    updatedPrescriptions[prescIndex].items[itemIndex].drugStoreProductId =
      drug.id;
    updatedPrescriptions[prescIndex].items[itemIndex].manualDrugName =
      drug.displayName;
    updatedPrescriptions[prescIndex].items[itemIndex].drugStoreProductName =
      drug.displayName;
    setPrescriptions(updatedPrescriptions);
    setDrugSearchResults([]);
    setDrugSearchQuery("");
  };

  // Existing functions...
  const handleMedicalRecordChange = (e) => {
    const { name, value } = e.target;
    setMedicalRecord((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handlePrescriptionTypeChange = (index, value) => {
    const updatedPrescriptions = [...prescriptions];
    updatedPrescriptions[index].type = value;
    setPrescriptions(updatedPrescriptions);
  };

  const handlePrescriptionNotesChange = (index, value) => {
    const updatedPrescriptions = [...prescriptions];
    updatedPrescriptions[index].notes = value;
    setPrescriptions(updatedPrescriptions);
  };

  const handlePrescriptionItemChange = (
    prescIndex,
    itemIndex,
    field,
    value
  ) => {
    const updatedPrescriptions = [...prescriptions];
    updatedPrescriptions[prescIndex].items[itemIndex][field] = value;

    // If they're typing in the manualDrugName field, reset the drugStoreProductId
    if (field === "manualDrugName") {
      updatedPrescriptions[prescIndex].items[itemIndex].drugStoreProductId =
        null;
      updatedPrescriptions[prescIndex].items[itemIndex].drugStoreProductName =
        "";
    }

    setPrescriptions(updatedPrescriptions);
  };

  const addPrescriptionItem = (prescIndex) => {
    const updatedPrescriptions = [...prescriptions];
    const items = updatedPrescriptions[prescIndex].items;
    updatedPrescriptions[prescIndex].items = [
      ...items,
      {
        id: items.length + 1,
        manualDrugName: "",
        drugStoreProductId: null,
        drugStoreProductName: "",
        dosage: "",
        quantity: 1,
      },
    ];
    setPrescriptions(updatedPrescriptions);
  };

  const removePrescriptionItem = (prescIndex, itemIndex) => {
    const updatedPrescriptions = [...prescriptions];
    updatedPrescriptions[prescIndex].items.splice(itemIndex, 1);
    setPrescriptions(updatedPrescriptions);
  };

  const addPrescription = () => {
    setPrescriptions([
      ...prescriptions,
      {
        id: prescriptions.length + 1,
        type: "Racikan",
        notes: "",
        items: [
          {
            id: 1,
            manualDrugName: "",
            drugStoreProductId: null,
            drugStoreProductName: "",
            dosage: "",
            quantity: 1,
          },
        ],
      },
    ]);
  };

  const removePrescription = (index) => {
    if (prescriptions.length === 1) {
      return; // Don't remove if it's the only prescription
    }
    const updatedPrescriptions = [...prescriptions];
    updatedPrescriptions.splice(index, 1);
    setPrescriptions(updatedPrescriptions);
  };

  return {
    // Screening data
    loading,
    error,
    patient,
    screening,

    // Medical record
    medicalRecord,
    setMedicalRecord,
    handleMedicalRecordChange,

    // Prescriptions
    prescriptions,
    setPrescriptions,
    handlePrescriptionTypeChange,
    handlePrescriptionNotesChange,
    handlePrescriptionItemChange,
    addPrescriptionItem,
    removePrescriptionItem,
    addPrescription,
    removePrescription,

    // Drug search
    drugSearchQuery,
    drugSearchResults,
    isSearchingDrugs,
    searchDrugs,
    selectDrug,
  };
};

// Prescription models
model Prescription {
  id                Int               @id @default(autoincrement())
  medicalRecordId   Int               
  medicalRecord     MedicalRecord     @relation(fields: [medicalRecordId], references: [id])
  items             PrescriptionItem[]
  notes             String?           // Additional notes about the prescription
  prescriptionType  String?           // Type of prescription (e.g., "Main", "Follow-up", "Alternative")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([medicalRecordId])
}

model PrescriptionItem {
  id                Int               @id @default(autoincrement())
  prescriptionId    Int
  prescription      Prescription      @relation(fields: [prescriptionId], references: [id])
  manualDrugName    String?           // For manual entry when drug not in system
  dosage            String            // Dosage instructions (e.g., "1 tablet 3 times a day")
  quantity          Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([prescriptionId])
}

saya ingin menambahkan fitur racikan, apakah saya perlu memodifikasi model prescriptiom dan menambahkan property dosage. 
