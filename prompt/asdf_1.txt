// app/rekam-medis/[id]/page.jsx
"use client";

import { useState, useEffect, use } from "react";
import { useRouter } from "next/navigation";
import { toast } from "react-toastify";
import PatientInfoCard from "./_components/PatientInfoCard";
import { LoadingState, ErrorState } from "./_components/UIState";
import DiagnosisSection from "./_components/DiagnosisSection";
import VitalsSection from "./_components/VitalsSection";
import PrescriptionsSection from "./_components/PrescriptionsSection";
import PharmacySection from "./_components/PharmacySection";
import DoctorSignature from "./_components/DoctorSignature";
import PageHeader from "./_components/PageHeader";

export default function MedicalRecordDetailPage({ params }) {
  const router = useRouter();
  const { id } = use(params);

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [medicalRecord, setMedicalRecord] = useState(null);
  const [patient, setPatient] = useState(null);
  const [screening, setScreening] = useState(null);
  const [prescriptions, setPrescriptions] = useState([]);
  const [pharmacyQueue, setPharmacyQueue] = useState(null);

  // Fetch medical record data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/medical-records/${id}`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {
          setMedicalRecord(data.medicalRecord);
          setPatient(data.patient);
          setScreening(data.screening);
          setPrescriptions(data.prescriptions);
          setPharmacyQueue(data.pharmacyQueue);
        } else {
          setError(data.message || "Failed to fetch medical record data");
          toast.error(data.message || "Failed to fetch medical record data");
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        setError("An error occurred while fetching data");
        toast.error("An error occurred while fetching data");
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchData();
    }
  }, [id]);

  if (loading) {
    return <LoadingState />;
  }

  if (error && !medicalRecord) {
    return <ErrorState error={error} router={router} />;
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
      {/* Main content */}
      <div className="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden print:shadow-none print:border-none">
        <PageHeader visitDate={medicalRecord?.visitDate} />

        <PatientInfoCard patient={patient} />

        {/* Medical record content */}
        <div className="p-5 md:p-6 space-y-6">
          <DiagnosisSection medicalRecord={medicalRecord} />

          {screening && <VitalsSection screening={screening} />}

          {prescriptions && prescriptions.length > 0 && (
            <PrescriptionsSection prescriptions={prescriptions} />
          )}

          {pharmacyQueue && (
            <PharmacySection
              pharmacyQueue={pharmacyQueue}
              screening={screening}
            />
          )}

          <DoctorSignature doctorName={medicalRecord?.doctorName} />
        </div>
      </div>
    </div>
  );
}

model Patient {
  id              Int       @id @default(autoincrement())
  no_rm           Int       @unique
  name            String
  gender          String?
  birthDate       DateTime?
  address         String?
  isBPJS          Boolean
  no_bpjs         String?   @unique
  nik             String?   @unique
  phoneNumber     String?   
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

    // Relations
  screenings      Screening[]
  medicalRecords  MedicalRecord[]
  allergies       PatientAllergy[]
}


model DrugStoreProduct {
  id            Int         @id @default(autoincrement()) 
  name          String
  category      String?
  manufacturer  String?
  supplierId    Int?
  supplier      Supplier?   @relation(fields: [supplierId], references: [id])
  purchasePrice Decimal?
  price         Decimal
  stock         Int
  expiryDate    String?
  batchNumber   String?
  unit          String
  ingredients   String?     // Kandungan/komposisi obat
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([name])
  @@index([category])
  @@index([manufacturer])
  @@index([expiryDate])
  @@index([supplierId])
}

// Screening model for initial patient assessment
model Screening {
  id                Int           @id @default(autoincrement())
  patientId         Int
  patient           Patient       @relation(fields: [patientId], references: [id])
  complaints        String        // Patient's complaints
  temperature       Decimal?      // Body temperature
  systolicBP        Int?          // Systolic blood pressure (e.g., 120 in "120/80")
  diastolicBP       Int?          // Diastolic blood pressure (e.g., 80 in "120/80")
  pulse             Int?          // Heart rate
  respiratoryRate   Int?          // Breathing rate
  weight            Decimal?      // Weight in kg
  height            Int?          // Height in cm
  waistCircumference Decimal?     // Lingkar pinggang in cm
  oxygenSaturation  Decimal?      // Saturasi oksigen in percentage
  isBPJSActive      Boolean?      // Status BPJS aktif atau tidak
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  nurseName         String?      // Name of the nurse who conducted the screening
  
  // Screening status
  status            String        @default("waiting") // waiting, in-progress, completed
  queueNumber       Int?
  
  // Relations
  medicalRecord     MedicalRecord?
  
  @@index([patientId])
  @@index([status])
  @@index([createdAt])
}

// Queue model for managing patient queue
model OutpatientQueue {
  id                Int           @id @default(autoincrement())
  screeningId       Int           @unique
  queueNumber       Int
  status            String        @default("waiting") // waiting, called, in-progress, completed
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([status])
  @@index([createdAt])
}

// Medical Record model for storing complete patient visit data
model MedicalRecord {
  id                Int           @id @default(autoincrement())
  patientId         Int
  patient           Patient       @relation(fields: [patientId], references: [id])
  screeningId       Int           @unique
  screening         Screening     @relation(fields: [screeningId], references: [id])
  
  // Doctor's examination
  diagnosis         String?       // Diagnosis description
  icdCode           String?       // ICD-10 code
  clinicalNotes     String?       // Additional clinical notes
  
  // Visit metadata
  visitType         String        @default("outpatient") // outpatient, inpatient
  visitDate         DateTime      @default(now())
  doctorName        String?
  
  // Relations
  prescriptions     Prescription[]  // Changed from Prescription? to Prescription[]
  pharmacyQueue     PharmacyQueue?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([patientId])
  @@index([visitDate])
  @@index([icdCode])
}

// Prescription models
model Prescription {
  id                Int               @id @default(autoincrement())
  medicalRecordId   Int               
  medicalRecord     MedicalRecord     @relation(fields: [medicalRecordId], references: [id])
  items             PrescriptionItem[]
  notes             String?           // Additional notes about the prescription
  prescriptionType  String?           // Type of prescription (e.g., "Main", "Follow-up", "Alternative", "Racikan")
  dosage            String?           // Shared dosage instruction for racikan prescriptions
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([medicalRecordId])
}

model PrescriptionItem {
  id                Int               @id @default(autoincrement())
  prescriptionId    Int
  prescription      Prescription      @relation(fields: [prescriptionId], references: [id])
  manualDrugName    String?           // For manual entry when drug not in system
  dosage            String?           // Individual dosage (only used for non-racikan prescriptions)
  quantity          Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([prescriptionId])
}

model PharmacyQueue {
  id                Int               @id @default(autoincrement())
  medicalRecordId   Int               @unique
  medicalRecord     MedicalRecord     @relation(fields: [medicalRecordId], references: [id])
  queueNumber       Int
  status            String            @default("waiting") // waiting, preparing, ready, dispensed
  pharmacistName    String?           // Name of the pharmacist handling the prescription
  notes             String?           // Any special notes for the pharmacist
  startedAt         DateTime?         // When preparation began
  completedAt       DateTime?         // When preparation was completed
  dispensedAt       DateTime?         // When medication was given to patient
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([status])
  @@index([createdAt])
  @@index([queueNumber])
}

// ICD-10 lookup table for diagnosis codes
model IcdCode {
  id                Int           @id @default(autoincrement())
  code              String        @unique
  description       String
  version           String?
  
  @@index([code])
}

// /app/api/medical-records/[id]/route.js
import { NextResponse } from "next/server";
import { db } from "@/lib/db";

// Get medical record by ID
export async function GET(request, { params }) {
  try {
    const resolvedParams = await params;
    const id = parseInt(resolvedParams.id);

    // Check if the ID is for a medical record or a screening
    let medicalRecord;

    // Try to find as medical record ID first
    medicalRecord = await db.medicalRecord.findUnique({
      where: {
        id: parseInt(id),
      },
    });

    // If not found, try to find by screening ID
    if (!medicalRecord) {
      medicalRecord = await db.medicalRecord.findUnique({
        where: {
          screeningId: parseInt(id),
        },
      });
    }

    if (!medicalRecord) {
      return NextResponse.json(
        { success: false, message: "Medical record not found" },
        { status: 404 }
      );
    }

    // Get related data
    const patient = await db.patient.findUnique({
      where: {
        id: medicalRecord.patientId,
      },
    });

    const screening = await db.screening.findUnique({
      where: {
        id: medicalRecord.screeningId,
      },
    });

    // Get all prescriptions for this medical record
    const prescriptions = await db.prescription.findMany({
      where: {
        medicalRecordId: medicalRecord.id,
      },
      include: {
        items: true,
      },
      orderBy: {
        createdAt: "asc",
      },
    });

    // Get pharmacy queue information
    const pharmacyQueue = await db.pharmacyQueue.findUnique({
      where: {
        medicalRecordId: medicalRecord.id,
      },
    });

    return NextResponse.json({
      success: true,
      medicalRecord,
      patient,
      screening,
      prescriptions,
      pharmacyQueue, // Include pharmacy queue information in the response
    });
  } catch (error) {
    console.error("Error fetching medical record:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch medical record" },
      { status: 500 }
    );
  }
}
