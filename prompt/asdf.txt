// helper-functions.js
import { toast } from "react-toastify";

// Fetch patient data from API
export const fetchPatientData = async (
  id,
  setLoading,
  setPatient,
  setError,
  setScreening
) => {
  try {
    setLoading(true);
    const urlParams = new URLSearchParams(window.location.search);
    const isBPJS = urlParams.get("isBPJS") === "true";

    const response = await fetch(`/api/patients/${id}?isBPJS=${isBPJS}`);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (data.success) {
      setPatient(data.patient);

      // If patient already has BPJS, set the form default
      if (data.patient.isBPJS) {
        setScreening((prev) => ({
          ...prev,
          no_bpjs: data.patient.no_bpjs || "",
        }));
      }
    } else {
      setError(data.message || "Failed to fetch patient data");
      toast.error(data.message || "Failed to fetch patient data", {
        autoClose: 200,
      });
    }
  } catch (error) {
    console.error("Error fetching patient:", error);
    setError("An error occurred while fetching patient data");
    toast.error("An error occurred while fetching patient data", {
      autoClose: 200,
    });
  } finally {
    setLoading(false);
  }
};

// Validate form data before submission
export const validateFormData = (screening, patient) => {
  if (!screening.complaints) {
    throw new Error("Keluhan pasien harus diisi");
  }

  if (!screening.paymentMethod) {
    throw new Error("Metode pembayaran harus dipilih");
  }

  // Validate BPJS verification if patient already has BPJS and is using BPJS payment
  if (
    screening.paymentMethod === "bpjs" &&
    patient?.isBPJS &&
    !screening.bpjsStatusVerified
  ) {
    throw new Error("Status BPJS harus diverifikasi terlebih dahulu");
  }

  // Validate BPJS number if using BPJS payment method with new BPJS number
  if (
    screening.paymentMethod === "bpjs" &&
    !patient.isBPJS &&
    screening.updatePatientBPJS &&
    !screening.no_bpjs
  ) {
    throw new Error(
      "Nomor BPJS harus diisi jika menggunakan metode pembayaran BPJS"
    );
  }

  // Validasi data alergi jika ada
  if (screening.allergies && screening.allergies.length > 0) {
    for (const allergy of screening.allergies) {
      if (!allergy.allergyName) {
        throw new Error("Nama alergi harus diisi");
      }
    }
  }
};

// Prepare screening data for submission
export const prepareScreeningData = (screening, id, patient) => {
  return {
    patientId: parseInt(id),
    complaints: screening.complaints,
    temperature: screening.temperature ? screening.temperature : null,
    systolicBP: screening.systolicBP ? parseInt(screening.systolicBP) : null,
    diastolicBP: screening.diastolicBP ? parseInt(screening.diastolicBP) : null,
    pulse: screening.pulse ? parseInt(screening.pulse) : null,
    respiratoryRate: screening.respiratoryRate
      ? parseInt(screening.respiratoryRate)
      : null,
    weight: screening.weight ? parseFloat(screening.weight) : null,
    height: screening.height ? parseInt(screening.height) : null,
    waistCircumference: screening.waistCircumference
      ? parseFloat(screening.waistCircumference)
      : null,
    oxygenSaturation: screening.oxygenSaturation
      ? parseFloat(screening.oxygenSaturation)
      : null,
    isBPJSActive:
      screening.paymentMethod === "bpjs" &&
      (screening.bpjsStatusVerified || !patient?.isBPJS),
    // Only include BPJS number if updating patient record
    ...(screening.paymentMethod === "bpjs" &&
    !patient.isBPJS &&
    screening.updatePatientBPJS
      ? { no_bpjs: screening.no_bpjs, updatePatientBPJS: true }
      : {}),
    // Include allergies data if exist
    allergies: screening.allergies || [],
  };
};

// Submit screening data to API
export const submitScreeningData = async (screeningData, setError, router) => {
  try {
    const response = await fetch("/api/screenings", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(screeningData),
    });

    const data = await response.json();

    if (!response.ok) {
      // Extract error message from the response
      throw new Error(data.message || `HTTP error! status: ${response.status}`);
    }

    if (data.success) {
      // Show success message
      toast.success("Skrining pasien berhasil disimpan", { autoClose: 2000 });

      // Redirect to the queue page
      router.push("/rawat-jalan/antrian");
    } else {
      setError(data.message || "Failed to save screening data");
      throw new Error(data.message || "Failed to save screening data");
    }
  } catch (error) {
    // Just set the error and re-throw it, don't show toast here
    setError(error.message);
    throw error;
  }
};

// Handle submission errors
export const handleSubmissionError = (error, setError) => {
  console.error("Error saving screening:", error);
  setError(error.message || "An error occurred while saving screening data");
  toast.error(
    error.message || "An error occurred while saving screening data",
    { autoClose: 200 }
  );
};

// Function to capitalize each word
export const capitalizeEachWord = (str) => {
  if (!str) return "";
  return str
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(" ");
};


import React, { useState, useEffect } from "react";
import { Plus, Edit2 } from "lucide-react";

const allergyTypeOptions = [
  { value: "makanan", label: "Makanan" },
  { value: "obat", label: "Obat" },
  { value: "lingkungan", label: "Lingkungan" },
  { value: "lainnya", label: "Lainnya" },
];

const severityOptions = [
  { value: "ringan", label: "Ringan" },
  { value: "sedang", label: "Sedang" },
  { value: "parah", label: "Parah" },
];

const statusOptions = [
  { value: "aktif", label: "Aktif" },
  { value: "tidak_aktif", label: "Tidak Aktif" },
  { value: "sembuh", label: "Sembuh" },
];

export default function ScreeningAllergies({
  patientId,
  allergies,
  setAllergies,
}) {
  const [isLoading, setIsLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);
  const [formData, setFormData] = useState({
    allergyName: "",
    allergyType: "obat",
    severity: "sedang",
    reaction: "",
    notes: "",
    status: "aktif",
  });
  const [editingIndex, setEditingIndex] = useState(null);

  // Fetch patient allergies
  useEffect(() => {
    if (patientId) {
      fetchExistingAllergies();
    }
  }, [patientId]);

  const fetchExistingAllergies = async () => {
    try {
      setIsLoading(true);
      const response = await fetch(`/api/patients/${patientId}/allergies`);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        // Directly add existing allergies to the screening
        const existingAllergiesFormatted = data.allergies.map((allergy) => ({
          allergyName: allergy.allergyName,
          allergyType: allergy.allergyType || "lainnya",
          severity: allergy.severity || "sedang",
          reaction: allergy.reaction || "",
          notes: allergy.notes || "",
          status: allergy.status || "aktif",
          existingAllergyId: allergy.id, // Keep reference to original ID
          reportedAt: allergy.reportedAt || new Date().toISOString(),
        }));

        // Only add if allergies array is empty (initial load)
        if (allergies.length === 0) {
          setAllergies(existingAllergiesFormatted);
        }
      } else {
        console.error("Failed to fetch allergies:", data.message);
      }
    } catch (error) {
      console.error("Error fetching allergies:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmitAllergy = (e) => {
    if (e) e.preventDefault();

    if (editingIndex !== null) {
      // Update existing allergy
      const updatedAllergies = [...allergies];
      updatedAllergies[editingIndex] = {
        ...updatedAllergies[editingIndex],
        ...formData,
        reportedAt: new Date().toISOString(), // Update reportedAt to current date
      };
      setAllergies(updatedAllergies);
    } else {
      // Add new allergy
      const newAllergy = {
        ...formData,
        reportedAt: new Date().toISOString(), // Set reportedAt for new allergies
      };
      setAllergies([...allergies, newAllergy]);
    }

    resetForm();
  };

  const handleEdit = (index) => {
    const allergy = allergies[index];
    setFormData({
      allergyName: allergy.allergyName,
      allergyType: allergy.allergyType || "obat",
      severity: allergy.severity || "sedang",
      reaction: allergy.reaction || "",
      notes: allergy.notes || "",
      status: allergy.status || "aktif",
    });
    setEditingIndex(index);
    setShowAddForm(true);
  };

  const handleDelete = (index) => {
    if (!confirm("Yakin ingin menghapus data alergi ini?")) return;

    const updatedAllergies = [...allergies];
    updatedAllergies.splice(index, 1);
    setAllergies(updatedAllergies);
  };

  const resetForm = () => {
    setFormData({
      allergyName: "",
      allergyType: "obat",
      severity: "sedang",
      reaction: "",
      notes: "",
      status: "aktif",
    });
    setEditingIndex(null);
    setShowAddForm(false);
  };

  const getSeverityBadgeClass = (severity) => {
    switch (severity) {
      case "ringan":
        return "bg-green-100 text-green-800";
      case "sedang":
        return "bg-yellow-100 text-yellow-800";
      case "parah":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusBadgeClass = (status) => {
    switch (status) {
      case "aktif":
        return "bg-red-100 text-red-800";
      case "tidak_aktif":
        return "bg-gray-100 text-gray-800";
      case "sembuh":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return "-";
    const date = new Date(dateString);
    return date.toLocaleDateString("id-ID", {
      day: "2-digit",
      month: "short",
      year: "numeric",
    });
  };

  return (
    <div className="mt-8 bg-white p-4 rounded-lg border border-gray-200">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold text-gray-800">Riwayat Alergi</h2>
        {!showAddForm && (
          <button
            type="button"
            onClick={() => setShowAddForm(true)}
            className="py-1 px-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm transition-colors"
          >
            Tambah Alergi
          </button>
        )}
      </div>

      {isLoading ? (
        <div className="text-center py-4">
          <div className="inline-block h-6 w-6 animate-spin rounded-full border-4 border-blue-600 border-r-transparent align-[-0.125em]"></div>
          <p className="mt-2 text-gray-600">Memuat data alergi...</p>
        </div>
      ) : allergies.length === 0 && !showAddForm ? (
        <div className="text-center py-6 text-gray-500">
          <p>Tidak ada data alergi yang tercatat</p>
        </div>
      ) : (
        <div className="space-y-4">
          {allergies.length > 0 && (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Nama Alergi
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Tipe
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Tingkat
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Status
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Dilaporkan
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Reaksi
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Catatan
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Tindakan
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {allergies.map((allergy, index) => (
                    <tr key={index}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="font-medium text-gray-900">
                          {allergy.allergyName}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-700">
                          {allergyTypeOptions.find(
                            (opt) => opt.value === allergy.allergyType
                          )?.label || "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {allergy.severity && (
                          <span
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityBadgeClass(
                              allergy.severity
                            )}`}
                          >
                            {severityOptions.find(
                              (opt) => opt.value === allergy.severity
                            )?.label || "-"}
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {allergy.status && (
                          <span
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeClass(
                              allergy.status
                            )}`}
                          >
                            {allergy.status === "tidak_aktif"
                              ? "Tidak Aktif"
                              : allergy.status.charAt(0).toUpperCase() +
                                allergy.status.slice(1)}
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-700">
                          {formatDate(allergy.reportedAt)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-700">
                          {allergy.reaction || "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-700">
                          {allergy.notes || "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          type="button"
                          onClick={() => handleEdit(index)}
                          className="text-blue-600 hover:text-blue-900 mr-4"
                        >
                          Edit
                        </button>
                        <button
                          type="button"
                          onClick={() => handleDelete(index)}
                          className="text-red-600 hover:text-red-900"
                        >
                          Hapus
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}

          {showAddForm && (
            <div
              id="allergyForm"
              className="mt-6 p-4 border border-gray-200 rounded-lg bg-gray-50"
            >
              <h3 className="text-lg font-medium mb-4">
                {editingIndex !== null ? "Edit Alergi" : "Tambah Alergi Baru"}
              </h3>
              <div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label
                      htmlFor="allergyName"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Nama Alergi *
                    </label>
                    <input
                      type="text"
                      id="allergyName"
                      name="allergyName"
                      value={formData.allergyName}
                      onChange={handleInputChange}
                      required
                      className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Contoh: Penisilin"
                    />
                  </div>

                  <div>
                    <label
                      htmlFor="allergyType"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Jenis Alergi
                    </label>
                    <select
                      id="allergyType"
                      name="allergyType"
                      value={formData.allergyType}
                      onChange={handleInputChange}
                      className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                    >
                      {allergyTypeOptions.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label
                      htmlFor="severity"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Tingkat Keparahan
                    </label>
                    <select
                      id="severity"
                      name="severity"
                      value={formData.severity}
                      onChange={handleInputChange}
                      className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                    >
                      {severityOptions.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label
                      htmlFor="status"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Status Alergi
                    </label>
                    <select
                      id="status"
                      name="status"
                      value={formData.status}
                      onChange={handleInputChange}
                      className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                    >
                      {statusOptions.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label
                      htmlFor="reaction"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Reaksi yang Terjadi
                    </label>
                    <input
                      type="text"
                      id="reaction"
                      name="reaction"
                      value={formData.reaction}
                      onChange={handleInputChange}
                      className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Contoh: Ruam merah, gatal"
                    />
                  </div>

                  <div className="md:col-span-2">
                    <label
                      htmlFor="notes"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Catatan Tambahan
                    </label>
                    <textarea
                      id="notes"
                      name="notes"
                      value={formData.notes}
                      onChange={handleInputChange}
                      rows={3}
                      className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Catatan tambahan tentang alergi ini"
                    />
                  </div>
                </div>

                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={resetForm}
                    className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    Batal
                  </button>
                  <button
                    type="button"
                    onClick={handleSubmitAllergy}
                    className="py-2 px-4 rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    Simpan
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

// app/api/screenings/route.js
import { NextResponse } from "next/server";
import { db } from "@/lib/db";

// Create a new screening entry
export async function POST(request) {
  try {
    const data = await request.json();

    // Validate required fields
    if (!data.patientId || !data.complaints) {
      return NextResponse.json(
        { success: false, message: "Missing required fields" },
        { status: 400 }
      );
    }

    // If trying to update patient with BPJS, check if the BPJS number already exists
    if (data.isBPJSActive && data.no_bpjs && data.updatePatientBPJS) {
      // Check if BPJS number already exists for another patient
      const existingPatient = await db.patient.findFirst({
        where: {
          no_bpjs: data.no_bpjs,
          id: {
            not: data.patientId, // Exclude current patient
          },
        },
      });

      if (existingPatient) {
        return NextResponse.json(
          {
            success: false,
            message: "Nomor BPJS telah terdaftar pada pasien lain",
          },
          { status: 400 }
        );
      }
    }

    // Generate a queue number (get highest queue number for today + 1)
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const latestQueue = await db.outpatientQueue.findFirst({
      where: {
        createdAt: {
          gte: today,
        },
      },
      orderBy: {
        queueNumber: "desc",
      },
    });

    const queueNumber = latestQueue ? latestQueue.queueNumber + 1 : 1;

    // If isBPJSActive is true and the patient doesn't have BPJS information,
    // update patient record with BPJS number
    if (data.isBPJSActive && data.no_bpjs && data.updatePatientBPJS) {
      await db.patient.update({
        where: { id: data.patientId },
        data: {
          isBPJS: true,
          no_bpjs: data.no_bpjs,
        },
      });
    }

    // Create the screening entry with the updated schema fields
    const screening = await db.screening.create({
      data: {
        patientId: data.patientId,
        complaints: data.complaints,
        temperature: data.temperature ? parseFloat(data.temperature) : null,
        systolicBP: data.systolicBP ? parseInt(data.systolicBP) : null,
        diastolicBP: data.diastolicBP ? parseInt(data.diastolicBP) : null,
        pulse: data.pulse ? parseInt(data.pulse) : null,
        respiratoryRate: data.respiratoryRate
          ? parseInt(data.respiratoryRate)
          : null,
        weight: data.weight ? parseFloat(data.weight) : null,
        height: data.height ? parseInt(data.height) : null,
        waistCircumference: data.waistCircumference
          ? parseFloat(data.waistCircumference)
          : null,
        oxygenSaturation: data.oxygenSaturation
          ? parseFloat(data.oxygenSaturation)
          : null,
        isBPJSActive: data.isBPJSActive || false,
        status: "waiting",
        queueNumber: queueNumber,
      },
    });

    // Create a queue entry
    await db.outpatientQueue.create({
      data: {
        screeningId: screening.id,
        queueNumber: queueNumber,
        status: "waiting",
      },
    });

    // Process allergies data if exists
    if (data.allergies && data.allergies.length > 0) {
      // Filter out empty allergy records
      const validAllergies = data.allergies.filter(
        (allergy) => allergy.allergyName && allergy.allergyName.trim() !== ""
      );

      // Create new allergy records
      for (const allergy of validAllergies) {
        await db.patientAllergy.create({
          data: {
            patientId: data.patientId,
            allergyName: allergy.allergyName,
            allergyType: allergy.allergyType || null,
            severity: allergy.severity || null,
            reaction: allergy.reaction || null,
            notes: allergy.notes || null,
          },
        });
      }
    }

    return NextResponse.json({
      success: true,
      screening,
      queueNumber,
    });
  } catch (error) {
    console.error("Error creating screening:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Failed to create screening",
        error: error.message,
      },
      { status: 500 }
    );
  }
}
