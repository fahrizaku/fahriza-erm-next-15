//app/pasien/tambah/page.jsx
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Loader2, Check } from "lucide-react";
import { toast } from "react-toastify";
import PatientInfoForm from "./_components/PatientInfoForm";
import PageHeader from "./_components/PageHeader";

const PatientRegistration = () => {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [savingPatient, setSavingPatient] = useState(false);
  const [isBPJS, setIsBPJS] = useState(false);
  const [nextRmNumber, setNextRmNumber] = useState("");

  // Form fields
  const [formData, setFormData] = useState({
    name: "",
    gender: "",
    birthDate: "",
    address: "",
    no_rm: "",
    no_bpjs: "",
    nik: "",
    phoneNumber: "",
  });

  // Fetch next RM number when component loads
  useEffect(() => {
    const fetchNextRmNumber = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/patients/next-rm`);
        const data = await response.json();

        if (data.success) {
          setNextRmNumber(data.nextRmNumber);
          setFormData((prev) => ({
            ...prev,
            no_rm: data.nextRmNumber,
          }));
        } else {
          console.error("Failed to fetch next RM number:", data.message);
          toast.error("Failed to fetch next RM number");
        }
      } catch (error) {
        console.error("Error fetching next RM number:", error);
        toast.error("Error connecting to server");
      } finally {
        setLoading(false);
      }
    };

    fetchNextRmNumber();
  }, []);

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  // Handle BPJS toggle
  const handleBPJSChange = (e) => {
    const newIsBPJS = e.target.checked;
    setIsBPJS(newIsBPJS);

    // Clear BPJS number if switching to regular patient
    if (!newIsBPJS) {
      setFormData((prev) => ({
        ...prev,
        no_bpjs: "",
      }));
    }
  };

  // Form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validation
    if (!formData.name) {
      toast.error("Nama pasien wajib diisi");
      return;
    }

    if (isBPJS && (!formData.no_bpjs || formData.no_bpjs.trim() === "")) {
      toast.error("Nomor BPJS wajib diisi untuk pasien BPJS");
      return;
    }

    try {
      setSavingPatient(true);

      // Prepare data for API
      const patientData = {
        ...formData,
        isBPJS,
        no_rm: parseInt(formData.no_rm, 10),
        // Convert empty strings to null
        nik: formData.nik?.trim() || null,
        no_bpjs: isBPJS ? formData.no_bpjs?.trim() || null : null,
        phoneNumber: formData.phoneNumber?.trim() || null,
      };

      // Create toast promise that shows loading/success/error states
      await toast.promise(
        fetch("/api/patients/register", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(patientData),
        }).then(async (response) => {
          const data = await response.json();

          if (data.success) {
            setTimeout(() => {
              router.push(`/pasien/${data.patientId}`);
            }, 1000);
            return data;
          } else {
            throw new Error(data.message || "Gagal menyimpan data pasien");
          }
        }),
        {
          loading: "Menyimpan data pasien...",
          success: "Data pasien berhasil disimpan!",
          error: (err) =>
            `${err.message || "Terjadi kesalahan saat menyimpan data"}`,
        }
      );
    } catch (error) {
      console.error("Error submitting form:", error);
      // The toast.promise will handle the error display
    } finally {
      setSavingPatient(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <PageHeader />

      {/* Registration Form */}
      <form
        onSubmit={handleSubmit}
        className="bg-white rounded-xl shadow-md p-6 border border-gray-200"
      >
        <h2 className="text-lg font-medium text-gray-800 mb-4">Data Pasien</h2>

        <PatientInfoForm
          formData={formData}
          handleInputChange={handleInputChange}
          isBPJS={isBPJS}
          handleBPJSChange={handleBPJSChange}
        />

        {/* Submit Button - Full width across both columns */}
        <div className="mt-8 col-span-full">
          <button
            type="submit"
            disabled={savingPatient || loading}
            className="w-full py-3 px-4 bg-gradient-to-r from-blue-600 to-cyan-500 text-white rounded-xl hover:shadow-lg transition-all font-medium flex items-center justify-center gap-2 disabled:opacity-70"
          >
            {savingPatient ? (
              <>
                <Loader2 className="w-5 h-5 animate-spin" />
                <span>Menyimpan...</span>
              </>
            ) : (
              <>
                <Check className="w-5 h-5" />
                <span>Simpan Data Pasien</span>
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default PatientRegistration;


import React from "react";
import { Shield, MapPin, FileText, CreditCard } from "lucide-react";
import SeparatedDateInput from "./SeparatedDateInput";

const PatientInfoForm = ({
  formData,
  handleInputChange,
  isBPJS,
  handleBPJSChange,
}) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Left Column */}
      <div className="space-y-4">
        <PersonalInformationFields
          formData={formData}
          handleInputChange={handleInputChange}
        />

        {/* BPJS checkbox */}
        <div className="mt-6">
          <div className="flex items-center">
            <input
              type="checkbox"
              id="isBPJS"
              checked={isBPJS}
              onChange={handleBPJSChange}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label
              htmlFor="isBPJS"
              className="ml-2 block text-sm font-medium text-gray-700"
            >
              Pasien BPJS
            </label>
          </div>
        </div>

        {/* BPJS Number (only shown if BPJS is checked) */}
        {isBPJS && (
          <BPJSField
            value={formData.no_bpjs}
            onChange={handleInputChange}
            required={isBPJS}
          />
        )}
      </div>

      {/* Right Column */}
      <div className="space-y-4">
        <AdditionalInformationFields
          formData={formData}
          handleInputChange={handleInputChange}
        />
      </div>
    </div>
  );
};

// Sub-component for Personal Information fields
const PersonalInformationFields = ({ formData, handleInputChange }) => {
  return (
    <>
      {/* Name input */}
   

      {/* Gender selection */}


      {/* Birth date with enhanced picker */}
      <div>
        <label
          htmlFor="birthDate"
          className="block text-sm font-medium text-gray-700 mb-1"
        >
          Tanggal Lahir
        </label>
        <SeparatedDateInput
          id="birthDate"
          name="birthDate"
          value={formData.birthDate}
          onChange={handleInputChange}
        />
      </div>

      {/* Phone Number */}
  
    </>
  );
};

// Sub-component for BPJS field


// Sub-component for Additional Information fields
const AdditionalInformationFields = ({ formData, handleInputChange }) => {
  return (
    <>
      {/* Address */}
    

      {/* RM Number (readonly) */}
   

      {/* NIK */}
     
    </>
  );
};

export default PatientInfoForm;


"use client";

import React, { useState, useEffect } from "react";

const SeparatedDateInput = ({ value, onChange, name, id, className }) => {
  const [day, setDay] = useState("");
  const [month, setMonth] = useState("");
  const [year, setYear] = useState("");

  // Indonesian month names
  const monthNames = [
    { value: "01", label: "Januari" },
    { value: "02", label: "Februari" },
    { value: "03", label: "Maret" },
    { value: "04", label: "April" },
    { value: "05", label: "Mei" },
    { value: "06", label: "Juni" },
    { value: "07", label: "Juli" },
    { value: "08", label: "Agustus" },
    { value: "09", label: "September" },
    { value: "10", label: "Oktober" },
    { value: "11", label: "November" },
    { value: "12", label: "Desember" },
  ];

  // Initialize fields from value prop
  useEffect(() => {
    if (value && value.length > 0) {
      const [yearVal, monthVal, dayVal] = value.split("-");
      setYear(yearVal);
      setMonth(monthVal);
      setDay(dayVal);
    }
  }, [value]);

  // Generate array of days for the selected month
  const getDaysInMonth = (monthVal, yearVal) => {
    if (!monthVal || !yearVal) return 31;
    return new Date(parseInt(yearVal), parseInt(monthVal), 0).getDate();
  };

  // Generate years array (e.g., from 1950 to current year)
  const getYearOptions = () => {
    const currentYear = new Date().getFullYear();
    const startYear = 1900;
    const years = [];

    for (let year = currentYear; year >= startYear; year--) {
      years.push(year.toString());
    }

    return years;
  };

  // Handle day input change - FIXED: Membiarkan user mengetik dan memvalidasi nanti
  const handleDayChange = (e) => {
    const inputDay = e.target.value;

    // Hanya biarkan input kosong atau angka
    if (inputDay === "" || /^\d+$/.test(inputDay)) {
      // Selalu simpan nilai yang diketik user
      setDay(inputDay);

      // Konversi ke format padded hanya saat update nilai form
      const paddedDay = inputDay ? inputDay.padStart(2, "0") : "";

      if (paddedDay && month && year) {
        // Validasi hanya saat update form
        const maxDays = getDaysInMonth(month, year);
        const numDay = parseInt(inputDay, 10);

        if (numDay > 0 && numDay <= maxDays) {
          // Hari valid, update nilai form
          updateDateValue(paddedDay, month, year);
        } else {
          // Hari tidak valid, kirim string kosong
          updateDateValue("", month, year);
        }
      } else {
        // Salah satu field kosong
        updateDateValue(paddedDay, month, year);
      }
    }
  };

  // Handle day input blur - Validasi & format saat focus hilang
  const handleDayBlur = () => {
    if (day) {
      const numDay = parseInt(day, 10);
      const maxDays = month && year ? getDaysInMonth(month, year) : 31;

      if (numDay > 0 && numDay <= maxDays) {
        // Format menjadi 2 digit
        const formattedDay = numDay.toString().padStart(2, "0");
        setDay(formattedDay);
        updateDateValue(formattedDay, month, year);
      } else {
        // Reset jika tidak valid
        setDay("");
        updateDateValue("", month, year);
      }
    }
  };

  // Handle month selection change
  const handleMonthChange = (e) => {
    const newMonth = e.target.value;
    setMonth(newMonth);

    // Validate day when month changes
    if (day && year && newMonth) {
      const numDay = parseInt(day, 10);
      const maxDays = getDaysInMonth(newMonth, year);

      if (numDay > maxDays) {
        const newDay = maxDays.toString().padStart(2, "0");
        setDay(newDay);
        updateDateValue(newDay, newMonth, year);
      } else {
        const paddedDay = day.padStart(2, "0");
        updateDateValue(paddedDay, newMonth, year);
      }
    } else {
      updateDateValue(day ? day.padStart(2, "0") : "", newMonth, year);
    }
  };

  // Handle year selection change
  const handleYearChange = (e) => {
    const newYear = e.target.value;
    setYear(newYear);

    // Validate day when year changes (for leap years)
    if (day && month && newYear) {
      const numDay = parseInt(day, 10);
      const maxDays = getDaysInMonth(month, newYear);

      if (numDay > maxDays) {
        const newDay = maxDays.toString().padStart(2, "0");
        setDay(newDay);
        updateDateValue(newDay, month, newYear);
      } else {
        const paddedDay = day.padStart(2, "0");
        updateDateValue(paddedDay, month, newYear);
      }
    } else {
      updateDateValue(day ? day.padStart(2, "0") : "", month, newYear);
    }
  };

  // Update the complete date value and trigger onChange
  const updateDateValue = (dayVal, monthVal, yearVal) => {
    if (dayVal && monthVal && yearVal) {
      const formattedDate = `${yearVal}-${monthVal}-${dayVal}`;

      if (onChange) {
        const syntheticEvent = {
          target: {
            name: name,
            value: formattedDate,
          },
        };
        onChange(syntheticEvent);
      }
    } else if (onChange) {
      // Clear the value if any field is empty
      const syntheticEvent = {
        target: {
          name: name,
          value: "",
        },
      };
      onChange(syntheticEvent);
    }
  };

  return (
    <div className={`relative ${className || ""}`}>
      <div className="flex items-center space-x-2">
        <div className="w-20">
          <input
            type="text"
            placeholder="tanggal"
            value={day}
            onChange={handleDayChange}
            onBlur={handleDayBlur}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            maxLength={2}
          />
        </div>

        <div className="w-40">
          <select
            value={month}
            onChange={handleMonthChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Bulan</option>
            {monthNames.map((m) => (
              <option key={m.value} value={m.value}>
                {m.label}
              </option>
            ))}
          </select>
        </div>

        <div className="w-28">
          <select
            value={year}
            onChange={handleYearChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Tahun</option>
            {getYearOptions().map((y) => (
              <option key={y} value={y}>
                {y}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Hidden input with the complete value in YYYY-MM-DD format */}
      <input
        type="hidden"
        id={id}
        name={name}
        value={day && month && year ? `${year}-${month}-${day}` : ""}
      />
    </div>
  );
};

export default SeparatedDateInput;
