// Update only the handleSubmit function in DoctorExaminationPage.jsx

const handleSubmit = async (e) => {
  e.preventDefault();
  setSubmitting(true);
  setFormError(null);

  try {
    // Validate required fields
    if (!medicalRecord.diagnosis) {
      throw new Error("Diagnosis pasien harus diisi");
    }

    if (!medicalRecord.doctorName) {
      throw new Error("Nama dokter harus diisi");
    }

    // Validate prescription items
    let hasValidPrescription = false;
    for (const prescription of prescriptions) {
      const isRacikan = prescription.type === "Racikan";
      
      // For racikan prescriptions, validate shared dosage
      if (isRacikan && !prescription.sharedDosage) {
        throw new Error("Dosis racikan harus diisi");
      }
      
      if (prescription.items.length > 0) {
        const invalidItems = prescription.items.filter(
          (item) => !item.manualDrugName || (!isRacikan && !item.dosage)
        );
        if (invalidItems.length === 0) {
          hasValidPrescription = true;
        }
      }
    }

    if (!hasValidPrescription) {
      throw new Error(
        "Setidaknya satu resep harus diisi lengkap (nama obat dan dosis)"
      );
    }

    // Format data for submission
    const medicalRecordData = {
      patientId: patient.id,
      screeningId: parseInt(id),
      ...medicalRecord,
      prescriptions: prescriptions
        .map((prescription) => {
          const isRacikan = prescription.type === "Racikan";
          
          return {
            type: prescription.type,
            notes: prescription.notes,
            dosage: isRacikan ? prescription.sharedDosage : null, // Only include dosage for racikan
            items: prescription.items
              .filter((item) => item.manualDrugName && (isRacikan || item.dosage))
              .map((item) => ({
                manualDrugName: item.manualDrugName,
                drugId: item.drugStoreProductId,
                dosage: isRacikan ? null : item.dosage, // Only include individual dosage for non-racikan
                quantity: parseInt(item.quantity),
              })),
          };
        })
        .filter((prescription) => prescription.items.length > 0),
    };

    // Submit the medical record
    const response = await fetch("/api/medical-records", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(medicalRecordData),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (data.success) {
      // Show success message
      toast.success("Rekam medis berhasil disimpan");

      // Redirect to medical record view
      router.push(`/rekam-medis/${data.medicalRecordId}`);
    } else {
      setFormError(data.message || "Failed to save medical record");
      toast.error(data.message || "Failed to save medical record");
    }
  } catch (error) {
    console.error("Error saving medical record:", error);
    setFormError(
      error.message || "An error occurred while saving medical record"
    );
    toast.error(
      error.message || "An error occurred while saving medical record"
    );
  } finally {
    setSubmitting(false);
  }
};